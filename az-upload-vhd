#! /bin/bash

########
# script for this workflow:
# https://docs.microsoft.com/en-us/azure/virtual-machines/linux/upload-vhd#option-1-upload-a-vhd
########

AZ=$(which az 2>/dev/null)
JQ=$(which jq 2>/dev/null)

C_FG_LT_GRAY='\033[1;30m'
C_FG_LT_RED='\033[1;31m'
C_FG_LT_GREEN='\033[1;32m'
C_FG_LT_YELLOW='\033[1;33m'
C_FG_LT_BLUE='\033[1;34m'
C_FG_LT_MAGENTA='\033[1;35m'
C_FG_LT_CYAN='\033[1;36m'
C_FG_LT_WHITE='\033[1;37m'
C_RESET='\033[0m'

if [[ -z $AZ ]]; then
    echo -e "${C_FG_LT_RED}ERROR: missing az! try installing Azure CLI.${C_RESET}"
    echo "https://docs.microsoft.com/en-us/cli/azure/install-azure-cli-apt?view=azure-cli-latest"
    exit 1
fi

if [[ ! $($AZ account show) ]]; then
    exit 1
fi

while getopts "r:s:l:c:f:" option; do
    case "${option}" in
        r) RESOURCE_GROUP=$OPTARG;;
        s) STORAGE_ACCOUNT=$OPTARG;;
        l) LOCATION=$OPTARG;;
        c) CONTAINER=$OPTARG;;
        f) VHD_FILE=$OPTARG;;

    esac
done

if [[ -z $RESOURCE_GROUP ]]; then
    echo -e "${C_FG_LT_RED}ERROR: Missing argument(s).${C_RESET}"
    echo -e "${C_FG_LT_WHITE}USAGE: $0 <-r resourceGroup> <-s storageAccount> <-c storageContainer> <-f vhdFile>${C_RESET}"
    echo -e "\n${C_FG_LT_RED}ERROR: No resource group specified. Valid options: ${C_RESET}"
    $AZ group list | $JQ -M '.[] | .name'
    exit 1
fi

if [[ ! $($AZ group show --name $RESOURCE_GROUP) ]]; then
    echo -ne "${C_FG_LT_YELLOW}Create resource group $RESOURCE_GROUP?${C_RESET} "
    read -p "(y/N): " CONFIRM

    if [[ -n $CONFIRM && $CONFIRM =~ ^[yY]$ ]]; then
        if [[ -z $LOCATION ]]; then
            echo -e "${C_FG_LT_YELLOW}Default location = eastus${C_RESET}"
            LOCATION="eastus"
        fi

        echo -e "\n${C_FG_LT_CYAN}Create resource group $RESOURCE_GROUP...${C_RESET}"
        $AZ group create --name $RESOURCE_GROUP --location $LOCATION || exit 1
    else
        exit 1
    fi
fi

echo -e "${C_FG_LT_GREEN}Resource group $RESOURCE_GROUP found.${C_RESET}"

if [[ -z $STORAGE_ACCOUNT ]]; then
    echo -e "${C_FG_LT_RED}ERROR: Missing argument(s).${C_RESET}"
    echo -e "${C_FG_LT_WHITE}USAGE: $0 <-r resourceGroup> <-s storageAccount> <-c storageContainer> <-f vhdFile>${C_RESET}"
    echo -e "\n${C_FG_LT_RED}ERROR: No storage account specified. Valid options: ${C_RESET}"
    $AZ storage account list --resource-group $RESOURCE_GROUP | $JQ -M '.[] | .name'
    exit 1
fi

if [[ ! $($AZ storage account show --resource-group $RESOURCE_GROUP --name $STORAGE_ACCOUNT) ]]; then
    echo -ne "${C_FG_LT_YELLOW}Create storage account $STORAGE_ACCOUNT?${C_RESET} "
    read -p "(y/N): " CONFIRM

    if [[ -n $CONFIRM && $CONFIRM =~ ^[yY]$ ]]; then
        if [[ -z $LOCATION ]]; then
            echo -e "${C_FG_LT_YELLOW}Default location = eastus${C_RESET}"
            LOCATION="eastus"
        fi

        echo -e "\n${C_FG_LT_CYAN}Create storage account $STORAGE_ACCOUNT...${C_RESET}"
        $AZ storage account create --resource-group $RESOURCE_GROUP --location $LOCATION --name $STORAGE_ACCOUNT --kind StorageV2 --sku Standard_LRS || exit 1
    else
        exit 1
    fi
fi

echo -e "${C_FG_LT_GREEN}Storage account $STORAGE_ACCOUNT found.${C_RESET}"

if [[ -z $CONTAINER ]]; then
    echo -e "${C_FG_LT_RED}ERROR: Missing argument(s).${C_RESET}"
    echo -e "${C_FG_LT_WHITE}USAGE: $0 <-r resourceGroup> <-s storageAccount> <-c storageContainer> <-f vhdFile>${C_RESET}"
    echo -e "\n${C_FG_LT_RED}ERROR: No container specified. Valid options: ${C_RESET}"
    $AZ storage container list --account-name $STORAGE_ACCOUNT | $JQ -M '.[] | .name'
    exit 1
fi

if [[ ! $($AZ storage container show --account-name $STORAGE_ACCOUNT --name $CONTAINER) ]]; then
    echo -ne "${C_FG_LT_YELLOW}Create container $CONTAINER?${C_RESET} "
    read -p "(y/N): " CONFIRM

    if [[ -n $CONFIRM && $CONFIRM =~ ^[yY]$ ]]; then
        echo -e "\n${C_FG_LT_CYAN}Create container $CONTAINER...${C_RESET}"
        
        $AZ storage container create --account-name $STORAGE_ACCOUNT --name $CONTAINER || exit 1
    else
        exit 1
    fi
fi

echo -e "${C_FG_LT_GREEN}Container $CONTAINER found.${C_RESET}"

if [[ -z $VHD_FILE || ! -f $VHD_FILE ]]; then
    echo -e "${C_FG_LT_RED}ERROR: Missing or invalid VHD file specified. ${VHD_FILE}${C_RESET}"
    echo -e "${C_FG_LT_WHITE}USAGE: $0 <-r resourceGroup> <-s storageAccount> <-c storageContainer> <-f vhdFile>${C_RESET}"
    exit 1
fi

if [[ $($AZ storage blob show --account-name $STORAGE_ACCOUNT --container-name $CONTAINER --name $VHD_FILE 2>/dev/null) ]]; then
    echo -ne "${C_FG_LT_YELLOW}Blob $VHD_FILE exists. It must be removed to continue. Delete? ${C_RESET}"
    read -p "(y/N): " CONFIRM

    if [[ -n $CONFIRM && $CONFIRM =~ ^[yY]$ ]]; then
        $AZ storage blob delete --account-name $STORAGE_ACCOUNT --container-name $CONTAINER --name $VHD_FILE || exit 1
    else
        exit 1
    fi
fi

SIZE=$(ls -laFh $VHD_FILE | cut -d' ' -f 5)

echo -e "\n${C_FG_LT_CYAN}Uploading $VHD_FILE ($SIZE)...${C_RESET}"
$AZ storage blob upload --account-name $STORAGE_ACCOUNT --container-name $CONTAINER --type page --file $VHD_FILE --name $VHD_FILE || exit 1

echo -e "\n${C_FG_LT_GREEN}VHD file $VHD_FILE was successfully uploaded to Azure.${C_RESET}\n"
