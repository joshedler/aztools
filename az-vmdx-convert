#! /bin/bash

########
# script for this workflow:
# https://docs.microsoft.com/bs-latn-ba/azure/virtual-machines/linux/create-upload-generic
########

DF=/bin/df
SED=/bin/sed

QEMU_IMG=$(which qemu-img 2>/dev/null)
JQ=$(which jq 2>/dev/null)

C_FG_LT_GRAY='\033[1;30m'
C_FG_LT_RED='\033[1;31m'
C_FG_LT_GREEN='\033[1;32m'
C_FG_LT_YELLOW='\033[1;33m'
C_FG_LT_BLUE='\033[1;34m'
C_FG_LT_MAGENTA='\033[1;35m'
C_FG_LT_CYAN='\033[1;36m'
C_FG_LT_WHITE='\033[1;37m'
C_RESET='\033[0m'

while getopts i:o: option; do
    case "${option}" in
        i) IN_FILE=$OPTARG;;
        o) OUT_FILE=$OPTARG;;
    esac
done

if [[ -z $IN_FILE || -z $OUT_FILE ]]; then
    echo -e "${C_FG_LT_RED}ERROR: Missing argument(s).${C_RESET}"
    echo -e "${C_FG_LT_WHITE}USAGE: $0 <-i myLinuxVM.vmdx> <-o myAzureVM>${C_RESET}"
    echo "EXAMPLE: $0 -i Kali-Linux-2019.3-vmware-amd64.vmdk -o Kali-Linux-2019.3-amd64"
    echo "         (Note: the extension is ignored for the second argument)"
    exit 1
fi

if [[ ! -f $IN_FILE ]]; then
    echo -e "${C_FG_LT_RED}ERROR: Input file '${IN_FILE}' can not be found.${C_RESET}"
    exit 1
fi

if [[ -z $QEMU_IMG ]]; then
    echo -e "${C_FG_LT_RED}ERROR: missing qemu-img! try installing package 'qemu-utils'.${C_RESET}"
    exit 1
fi

if [[ -z $JQ ]]; then
    echo -e "${C_FG_LT_RED}ERROR: missing jq! try installing package 'jq'.${C_RESET}"
    exit 1
fi

if [[ ! $IN_FILE =~ \.vmdk$ ]]; then
    echo -e "${C_FG_LT_YELLOW}WARNING: Input file does not appear to be VMDK (missing .vmdk extension).${C_RESET}"
    read -p "Press [Enter] to continue or [Ctrl]-C to abort: " CONFIRM
fi

echo ''
echo -e "${C_FG_LT_GRAY}qemu-img:              ${QEMU_IMG}${C_RESET}"
echo -e "${C_FG_LT_GRAY}jq:                    ${JQ}${C_RESET}"

INFO=$($QEMU_IMG info -f vmdk $IN_FILE --output json)

KB=1024
MB=$((KB*KB))
SPACE_NEEDED=$(echo $INFO | $JQ '."virtual-size"')
SPACE_AVAILABLE=$(($($DF --output=avail . | $SED 1d)*$KB))

echo ''

RAW_FILE="${OUT_FILE}.raw"

echo ''

if [[ -f $RAW_FILE ]]; then
    echo -ne "${C_FG_LT_CYAN}"
    ls -laFh $RAW_FILE
    echo -e "${C_FG_LT_YELLOW}RAW file $RAW_FILE exists; it will be re-used as-is unless manually deleted.${C_RESET}"
    read -p "Press [Enter] to continue or [Ctrl]-C to abort: " CONFIRM
else
    echo "Free space needed:     $(numfmt --to=iec --padding=4 $SPACE_NEEDED)"
    echo "Free space available:  $(numfmt --to=iec --padding=4 $SPACE_AVAILABLE)"

    if [[ $SPACE_NEEDED -gt $SPACE_AVAILABLE ]]; then
        echo -e "${C_FG_LT_RED}ERROR: Not enough free space available in the current directory.${C_RESET}"
        exit 1
    fi

    echo -e "${C_FG_LT_CYAN}VMDK -> RAW...${C_RESET}"
    $QEMU_IMG convert -f vmdk -O raw "$IN_FILE" "$RAW_FILE"
fi

RAW_SIZE=$($QEMU_IMG info -f raw $RAW_FILE --output json | $JQ '."virtual-size"')
ROUNDED_SIZE=$((($SPACE_NEEDED/$MB + 1) * $MB))

echo ''
echo "Raw disk current size: $(numfmt --to=iec --padding=4 $RAW_SIZE)"
echo "Raw disk target size:  $(numfmt --to=iec --padding=4 $ROUNDED_SIZE)"

echo ''

if [[ $RAW_SIZE -lt $ROUNDED_SIZE ]]; then
    echo -e "${C_FG_LT_CYAN}Resize RAW disk to $(numfmt --to=iec $ROUNDED_SIZE)...${C_RESET}"
    $QEMU_IMG resize -f raw $RAW_FILE $ROUNDED_SIZE
else
    echo -e "${C_FG_LT_YELLOW}Raw file appears to have been resized to $(numfmt --to=iec $ROUNDED_SIZE).${C_RESET}"
fi

SPACE_AVAILABLE=$(($($DF --output=avail . | $SED 1d)*$KB))

VHD_FILE="${OUT_FILE}.vhd"

echo ''

if [[ -f $VHD_FILE ]]; then
    echo -ne "${C_FG_LT_CYAN}"
    ls -laFh $VHD_FILE
    echo -e "${C_FG_LT_YELLOW}VHD file $VHD_FILE exists; it will be re-used as-is unless manually deleted.${C_RESET}"
    read -p "Press [Enter] to continue or [Ctrl]-C to abort: " CONFIRM
else
    echo "Free space needed:     $(numfmt --to=iec --padding=4 $RAW_SIZE)"
    echo "Free space available:  $(numfmt --to=iec --padding=4 $SPACE_AVAILABLE)"

    if [[ $SPACE_NEEDED -gt $SPACE_AVAILABLE ]]; then
        echo -e "${C_FG_LT_RED}ERROR: Not enough free space available in the current directory.${C_RESET}"
        exit 1
    fi

    echo -e "${C_FG_LT_CYAN}RAW -> VHD...${C_RESET}"
    $QEMU_IMG convert -f raw -o subformat=fixed,force_size -O vpc "$RAW_FILE" "${VHD_FILE}"
fi

echo -e "\n${C_FG_LT_GREEN}VHD file $VHD_FILE is ready to upload to Azure.${C_RESET}\n"
